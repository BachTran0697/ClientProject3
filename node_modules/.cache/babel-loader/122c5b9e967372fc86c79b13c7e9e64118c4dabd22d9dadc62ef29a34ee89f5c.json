{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hoc\\\\eProject3\\\\clientproject3\\\\src\\\\services\\\\authService.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode'; // Ensure this is the correct import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'https://localhost:7099';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      try {\n        const decodedUser = decodeToken(storedToken);\n        if (isTokenExpired(decodedUser)) {\n          logout();\n        } else {\n          setUser(decodedUser);\n          console.log('Loaded user from token:', decodedUser); // Debug log\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        logout();\n      }\n    }\n  }, []);\n  const decodeToken = token => {\n    const decoded = jwtDecode(token);\n    return {\n      username: decoded.Username,\n      roleId: decoded[\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"],\n      exp: decoded.exp // Add token expiration\n    };\n  };\n  const isTokenExpired = decodedUser => {\n    const currentTime = Date.now() / 1000;\n    return decodedUser.exp < currentTime;\n  };\n  const login = async (logiN_NAME, logiN_PASSWORD) => {\n    const response = await fetch(`${API_BASE_URL}/api/Auth`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        logiN_NAME,\n        logiN_PASSWORD\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const {\n      token\n    } = await response.json();\n    const decodedUser = decodeToken(token);\n    console.log('Decoded user data:', decodedUser); // Debug log\n    localStorage.setItem('token', token);\n    setUser(decodedUser);\n    return decodedUser;\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","AuthProvider","children","_s","user","setUser","storedToken","localStorage","getItem","decodedUser","decodeToken","isTokenExpired","logout","console","log","error","token","decoded","username","Username","roleId","exp","currentTime","Date","now","login","logiN_NAME","logiN_PASSWORD","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/Hoc/eProject3/clientproject3/src/services/authService.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport jwtDecode from 'jwt-decode'; // Ensure this is the correct import\r\n\r\nconst API_BASE_URL = 'https://localhost:7099';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    if (storedToken) {\r\n      try {\r\n        const decodedUser = decodeToken(storedToken);\r\n        if (isTokenExpired(decodedUser)) {\r\n          logout();\r\n        } else {\r\n          setUser(decodedUser);\r\n          console.log('Loaded user from token:', decodedUser); // Debug log\r\n        }\r\n      } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        logout();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const decodeToken = (token) => {\r\n    const decoded = jwtDecode(token);\r\n    return {\r\n      username: decoded.Username,\r\n      roleId: decoded[\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"],\r\n      exp: decoded.exp, // Add token expiration\r\n    };\r\n  };\r\n\r\n  const isTokenExpired = (decodedUser) => {\r\n    const currentTime = Date.now() / 1000;\r\n    return decodedUser.exp < currentTime;\r\n  };\r\n\r\n  const login = async (logiN_NAME, logiN_PASSWORD) => {\r\n    const response = await fetch(`${API_BASE_URL}/api/Auth`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ logiN_NAME, logiN_PASSWORD }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Login failed');\r\n    }\r\n\r\n    const { token } = await response.json();\r\n    const decodedUser = decodeToken(token);\r\n    console.log('Decoded user data:', decodedUser); // Debug log\r\n    localStorage.setItem('token', token);\r\n    setUser(decodedUser);\r\n    return decodedUser;\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}